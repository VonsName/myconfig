1、关闭firewall：
systemctl stop firewalld.service #停止firewall
systemctl disable firewalld.service #禁止firewall开机启动
firewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）

2、iptables防火墙（这里iptables已经安装，下面进行配置）
vi/etc/sysconfig/iptables #编辑防火墙配置文件
# sampleconfiguration for iptables service
# you can edit thismanually or use system-config-firewall
# please do not askus to add additional ports/services to this default configuration
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT[0:0]
:OUTPUT ACCEPT[0:0]
-A INPUT -m state--state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -p icmp -jACCEPT
-A INPUT -i lo -jACCEPT
-A INPUT -p tcp -mstate --state NEW -m tcp --dport 22 -j ACCEPT
-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -jACCEPT
-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080-j ACCEPT
-A INPUT -j REJECT--reject-with icmp-host-prohibited
-A FORWARD -jREJECT --reject-with icmp-host-prohibited
COMMIT
:wq! #保存退出

备注：这里使用80和8080端口为例。***部分一般添加到“-A INPUT -p tcp -m state --state NEW -m tcp--dport 22 -j ACCEPT”行的上面或者下面，切记不要添加到最后一行，否则防火墙重启后不生效。
systemctlrestart iptables.service #最后重启防火墙使配置生效
systemctlenable iptables.service #设置防火墙开机启动

3.update user set authentication_string =password('...'),password_expired='N',password_last_changed=now() where user='root';修改密码
4.SET SQL_SAFE_UPDATES = 0; 修改数据库模式 safe-updates模式下不能根据非主键where条件修改；
--------------------------------centos7--------------------------------------
5.firewall-cmd --zone=public --add-port=8080/tcp --permanent ：添加开放端口
6.systemctl start firewalld.service ：开启防火墙；
7.firewall-cmd --reload  或者systemctl restart firewalld、service firewalld restart ：重启防火墙
8.firewall-cmd --permanent --list-port：查看防火墙列表；
9.systemctl stop firewalld：禁用防火墙；
10.systemctl enable firewalld：设置开机启动；
11.sytemctl disable firewalld：停止并禁用开机启动
12.systemctl status firewalld或者 firewall-cmd --state：查看状态
======================================================================
docker run --name mysql01 -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=password mysql:tag 启动mysql并映射端口
docker run --name mysql02 -p 3306:3306  -v /my/custom:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=password -d mysql:tag 指定一个配置文件 /my/custom =>mysql配置文件的路径

====================================docker搭建redis集群=======================================================

1.docker run --name redis-master -p:6380:6379 -d redis  启动一个容器命名为redis-master
2.docker exec -it 461b512c4013 bash  进入master容器内
3.redis-cli  使用客户端连接
4.info replication 查看节点状态
5.wget  http://download.redis.io/redis-stable/redis.conf 下载redis配置文件
6.vim redis.conf  配置主节点位置  slaveof 47.106.13.245 6380
7.将redis-server赋值到redis.conf同一级目录
docker build -t redis:3.0.7 .


========================
1.docker run --name redis-master -p 6390:6379  -e REDIS_REPLICATION_MODE=master   -e REDIS_PASSWORD=masterpassword123 -d  redis:latest
2.docker run --name redis-slave -p 6391:6379 \
  --link redis-master:master \
  -e REDIS_REPLICATION_MODE=slave \
  -e REDIS_MASTER_HOST=master \
  -e REDIS_MASTER_PORT_NUMBER=6379 \
  -e REDIS_MASTER_PASSWORD=masterpassword123 \
  -e REDIS_PASSWORD=password123 \
   -d redis:latest
3.docker exec redis-slave redis-cli -a password123 SLAVEOF NO ONE 配置从服务器成为主服务器
4.docker run --name some-redis -d redis redis-server --appendonly yes 使用日志持久化的方式保存数据
==========================================================
elasticsearch

1.JVM虚拟机内存不足
错误：“JavaHotSpot(TM) 64-Bit Server VM warning: INFO: error='Cannotallocate memory' (errno=12)”表示内存不足，其配置文件为config目录下的jvm.options,默认为2g，可以修改为1g。
2.  错误“max virtual memory areas vm.max_map_count [65530]is too low, increase to at least [262144]”，max_map_count文件包含限制一个进程可以拥有的VMA(虚拟内存区域)的数量，系统默认是65530，修改成262144。解决方法是修改/etc/sysctl.conf配置文件，添加vm.max_map_count=262144，记得需要重启机器才起作用，
3. max file descriptors过小
错误“max file descriptors [65535] for elasticsearchprocess is too low, increase to at least [65536]”，maxfile descriptors为最大文件描述符，设置其大于65536即可。解决方法是修改/etc/security/limits.conf文件，添加“* - nofile65536 * - memlock unlimited”，“*”表示给所有用户起作用
4.如果换成“IP：9200”，则浏览器与curl都无法进行访问，那么如何让外网访问呢？网上查了一下，需要修改config目录下elasticsearch.yml文件，修改network.host为“0.0.0.0”，然后进行启动成功，外网就可以访问啦
5.Exception in thread "main" java.nio.file.AccessDeniedException: /usr/local/elasticsearch/el/config/jvm.options
这是因为使用非root用户启动es的时候，没有对该文件赋权
chown -R elasticsearch:elasticsearch /usr/local/elasticsearch/el
